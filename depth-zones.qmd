```{r}
# load libraries
librarian::shelf(tidyverse, janitor, sf, terra, tmap, knitr, showtext, gt, ggtext, leaflet)
```

## Here is what the PMEP depth zones stand for, according to the metadata:
### NOTE: The substrate data records the whole name, rather than using the # code

- Value 0: Landward Zone
- Value 1: Core Zone (Estuary Overlap)
- Value 2: Core Zone (Shoreline to -30m), State Waters
- Value 3: Core Zone (Shoreline to -30m), Federal Waters
- Value 4: Seaward Zone (-30m to -100m), State Waters
- Value 5: Seaward Zone (-30m to -100m), Federal Waters
- Value 6: Deep Shelf or Channel (-100m to -200m), State Waters
- Value 7: Deep Shelf or Channel (-100m to -200m), Federal Waters
- Value 8: Outside PMEP Score (>-300m) or International Waters

## Read in substrate, biota and MPA data

```{r}
# Read in substrate and biotic data
#substrate <- readRDS("substrate.rds")
#biota <- readRDS("Biota.rds") |>
#  clean_names()

biota <- Biota |>
  clean_names()

# Read in MPA boundaries data
boundary.dir <- "/capstone/marinebiomaps/data/MPA_boundaries"
mpa_boundaries <- sf::st_read(file.path(boundary.dir, "California_Marine_Protected_Areas_[ds582].shp"))
```

### Here are all of the PMEP zones represented in the Biota dataset:

```{r}
# Look at depth zones in the biota dataset
unique(biota$pmep_zone)
```
### And here are all of the PMEP zones represented in the substrate dataset:

```{r}
unique(substrate$pmep_zone_detail)
```

## For the purposes of the depth zone analysis, I have decided to use the PMEP Zones that are recorded in the substrate data, rather than the biotic data. This is because it is expected for there to be 100% MPA coverage of the different substrate types, where as the biotic data may not contain whole coverage of MPA, given the nature of biota. Is this a good method?

### In order to do this, I need to combine the MPA boundary data with the substrate data


This code chunk filters ALL mpas - keeps geo
```{r}
# Clean boundaries data and get it ready for joining - Michelle's code is commented out. Use?
mpas <- mpa_boundaries %>%
  clean_names() %>%
  select("type", "shortname", "geometry")
  #filter(name == "Point Lobos SMR") %>%
  # Select relevant columns
  # select(-c("objectid", "ccr", "area_sq_mi", "study_regi", "fullname", "ccr_int", "name", "acres", "shape_are", "shape_len")) %>%
  # mutate(area_km_mpa = hectares / 100) %>%  # Convert hectares to square km
  # select(-hectares)
```

```{r}
names(substrate)
```

```{r}
unique(substrate$pmep_region)
```


This code chunk selects substrate cats i want - keeps geo
```{r}
# FIrst, filter the substrate data to just the variables I'm interested in
depth_zones_sub_filtered <- substrate |>
  select("pmep_zone_detail", "Shape", "pmep_region")
```

Check and match CRS between filtered mpa and sub categories
```{r}
# Check CRS 
st_crs(depth_zones_sub_filtered) == st_crs(mpas)

# Match CRS
mpas <- st_transform(mpas, crs = st_crs(substrate))
```


This code chunk combines substrate and mpa...but just for Point Lobos

```{r}
# Filter mpa data to just Point Lobos
point_lobos <- mpas |>
  filter(shortname == "Point Lobos")

# Perform spatial join
lobos_substrate_depth_geo <- st_intersection(point_lobos, depth_zones_sub_filtered)
```

Rename the pmep zones
```{r}
lobos_substrate_depth_geo <- lobos_substrate_depth_geo %>%
  mutate(pmep_zone_detail = recode(pmep_zone_detail,
                                   "Core Zone (Shoreline to -30m), State Waters" = "Zone 2: Core Zone (Shoreline to -30m), State Waters",
                                   "Deep Shelf or Sound (-100m to -200m), State Waters" = "Zone 6: Deep Shelf or Sound (-100m to -200m), State Waters",
                                   "Landward Zone" = "Zone 0: Landward Zone",
                                   "Outside PMEP Scope (>-200m) or International Waters" = "Zone 8: Outside PMEP Scope (>-200m) or International Waters",
                                   "Seaward Zone (-30m to -100m), State Waters" = "Zone 4: Seaward Zone (-30m to -100m), State Waters"))  
```

```{r}
unique(lobos_substrate_depth_geo$pmep_zone_detail)
```



This chunk makes a map of Point Lobos


```{r}
font_add_google("Montserrat", "montserrat")
showtext_auto()

# Create base map with the colored polygons
tm_shape(lobos_substrate_depth_geo) +
  tm_polygons(col = "pmep_zone_detail",
              palette = c('#09EEC8','#6EA1C8', '#3C7BB7'),
              title = "Depth\nZones",
              labels = c("Zone 0", "Zone 2", "Zone 4", "Zone 6", "Zone 8")) +
  # Add the same shape again but with solid fill to mask underlying features
  tm_shape(lobos_substrate_depth_geo) +
  tm_fill(col = "pmep_zone_detail",
          palette = c('#09EEC8','#6EA1C8', '#3C7BB7'),
          legend.show = FALSE) +  # Don't show this in legend
  tm_layout(legend.position = c("right", "bottom"),
            legend.title.fontfamily = "montserrat",
            legend.text.fontfamily = "montserrat") 
  
```

```{r}
names(lobos_substrate_depth_geo)
```
# Calculate the percentage of each depth zone in the Point Lobos MPA

```{r}
# Drop geometry
lobos_substrate_depth_simple <- lobos_substrate_depth_geo |>
  st_drop_geometry()
```

```{r}
# Step 2: Make sure pmep_zone is treated as a factor (categorical)
lobos_substrate_depth_simple$pmep_zone_detail <- as.factor(lobos_substrate_depth_simple$pmep_zone_detail)

# Step 3: Calculate the percentages for each shortname and pmep_zone combination
lobos_percentages <- lobos_substrate_depth_simple |>
  # Group by shortname and pmep_zone to count occurrences
  group_by(shortname, pmep_zone_detail) |>
  summarise(count = n(), .groups = "drop") |>
  
  # Group by shortname to calculate total count for each shortname
  group_by(shortname) %>%
  mutate(percentage = count / sum(count) * 100) |>
  
  # Reshape data to have a column for each unique pmep_zone
  select(-count) |>
  pivot_wider(
    names_from = pmep_zone_detail,
    values_from = percentage) 

```

```{r}
# Make a lobos pivot longer table
lobos_long <- lobos_percentages %>%
  pivot_longer(
    cols = -`shortname`, 
    names_to = "PMEP_Zone",
    values_to = "Percentage"
  )
```


```{r}

lobos_long |>
  gt() |> 
  tab_header(
    title = md("Depth Zones of **Point Lobos SMR and SMCA**"),
    subtitle = "depth zones as percentages of total protected area"
  ) |> 
  tab_style(
    style = cell_text(size = px(12)),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_text(size = px(10)), # Adjust size for source note
    locations = cells_source_notes()
  ) |>
  fmt_number(
    columns = Percentage,  
    decimals = 2,
    suffix = "%"
  ) |>
  text_transform(
    locations = cells_body(columns = Percentage),
    fn = function(x) paste0(x, "%")  # Manually appends the % sign
  ) |>
  tab_style(
    style = cell_text(color = "#002f41"),  # Change text color (modify as needed)
    locations = cells_body(columns = Percentage)
  ) |> 
  tab_source_note(md("*Depth Zones classified by the Pacific Marine and Estuarine Partnership (PMEP)*")) 

```



## OK HERE... I AM TRYING TO COMBINE THE DATA SO THAT I CAN DO FULL MPA ANALYSIS...

### I can run stats on the data after removing the geometry column.......but first i have to join the geospatial data together to get the mpas overlain with the sub....

#### BUT i can do it in 3s, remove the geometry, and then join the three simple dfs to run analysis, without doing too much comp. NO NEED to make a big statewide map..............at least not yet

## BUT FIRST IM GOING TO HAVE TO BREAK THIS DOWN INTO SMALLER CATEGORIES because there are some invalid polygons preventing analysis, and st_make_valid was not gonna run on a file this size. 

```{r}
names(mpas)
```

```{r}
# Correct for invalid geometries
mpas <- st_make_valid(mpas)
```

```{r}
names(depth_zones_sub_filtered)
```

```{r}
unique(depth_zones_sub_filtered$pmep_region)
```

```{r}
# Filter to North
north_sub <- depth_zones_sub_filtered |>
  filter(pmep_region == "Pacific Northwest")

# Filter to Central
central_sub <- depth_zones_sub_filtered |>
  filter(pmep_region == "Central California")

# Filter to Southern
south_sub <- depth_zones_sub_filtered |>
  filter(pmep_region == "Southern California Bight")
```

```{r}
north_sub_mpa <- st_intersection(mpas, north_sub)
```

```{r}
central_sub_mpa <- st_intersection(mpas, central_sub)
```

```{r}
south_sub_mpa <- st_intersection(mpas, south_sub)
```
## All of the mpas and substrates were able to be combined in the separate regions....SO THE INVALID POLYGONS ARE PROBABLY IN THE REGION OVERLAP

```{r}
# Make NON GEO dfs for each region
north_sub_mpa_simple <- north_sub_mpa |> 
  st_drop_geometry()

central_sub_mpa_simple <- central_sub_mpa |> 
  st_drop_geometry()

south_sub_mpa_simple <- south_sub_mpa |> 
  st_drop_geometry()
```

```{r}
# COMBINE the simple dfs into one big simple df for all of CA depth zones!!!!!!!
california_depths_simple <- bind_rows(north_sub_mpa_simple, central_sub_mpa_simple, south_sub_mpa_simple)
```

```{r}
unique(california_depths_simple$shortname)
```


#### I am going to calculate the percentages of each MPA that are in each depth zone


```{r}

# Step 2: Make sure pmep_zone is treated as a factor (categorical)
california_depths_simple$pmep_zone_detail <- as.factor(california_depths_simple$pmep_zone_detail)

# Step 3: Calculate the percentages for each shortname and pmep_zone combination
depth_zones_mpas <- california_depths_simple |>
  # Group by shortname and pmep_zone to count occurrences
  group_by(shortname, pmep_zone_detail) |>
  summarise(count = n(), .groups = "drop") |>
  
  # Group by shortname to calculate total count for each shortname
  group_by(shortname) %>%
  mutate(percentage = count / sum(count) * 100) |>
  
  # Reshape data to have a column for each unique pmep_zone
  select(-count) |>
  pivot_wider(
    names_from = pmep_zone_detail,
    values_from = percentage) |>
    #values_fill = 0)  |> # Fill NA values with 0
  
  # Rename columns to also reflect PMEP zone code
  rename(
    "Marine Protected Area" = "shortname",
    "Zone 6: Deep Shelf or Sound (-100m to -200m), State Waters" = "Deep Shelf or Sound (-100m to -200m), State Waters" ,
    "Zone 8: Outside PMEP Scope (>-200m) or International Waters" = "Outside PMEP Scope (>-200m) or International Waters",
    #"No Data" =  "NA",
    "Zone 5: Seaward Zone (-30m to -100m), Federal" = "Seaward Zone (-30m to -100m), Federal",
    "Zone 2: Core Zone (Shoreline to -30m), State Waters" = "Core Zone (Shoreline to -30m), State Waters",
    "Zone 0: Landward Zone" = "Landward Zone",
    "Zone 4: Seaward Zone (-30m to -100m), State Waters" = "Seaward Zone (-30m to -100m), State Waters",
    "Zone 7: Deep Shelf or Sound (-100m to -200m), Federal" = "Deep Shelf or Sound (-100m to -200m), Federal",
    "Zone 3: Core Zone (Shoreline to -30m), Federal" = "Core Zone (Shoreline to -30m), Federal"
  ) |>
  # Put the columns in desired order
  select(
    "Marine Protected Area",
    "Zone 0: Landward Zone",
    "Zone 2: Core Zone (Shoreline to -30m), State Waters",
    "Zone 3: Core Zone (Shoreline to -30m), Federal",
    "Zone 4: Seaward Zone (-30m to -100m), State Waters",
    "Zone 5: Seaward Zone (-30m to -100m), Federal",
    "Zone 6: Deep Shelf or Sound (-100m to -200m), State Waters",
    "Zone 7: Deep Shelf or Sound (-100m to -200m), Federal",
    "Zone 8: Outside PMEP Scope (>-200m) or International Waters"
  )
  
```


```{r}
# Make a pivot longer table
depth_zones_long <- depth_zones_mpas %>%
  pivot_longer(
    cols = -`Marine Protected Area`, 
    names_to = "PMEP_Zone",
    values_to = "Percentage"
  )
```


```{r}
# Calculate mean percentage for each PMEP zone, ignoring NA values
total_depth_avg <- depth_zones_long %>%
  group_by(PMEP_Zone) %>%
  summarise(
    avg_percentage = mean(Percentage, na.rm = TRUE),
    n_mpas = sum(!is.na(Percentage)),  # Count of MPAs with data for this zone
    total_mpas = n_distinct(`Marine Protected Area`, na.rm = TRUE)  # Total MPAs in dataset
  ) %>%
  mutate(
    coverage = n_mpas / total_mpas * 100  # Percentage of MPAs that have this zone
  )

# Sort by average percentage...
total_depth_avg <- total_depth_avg %>%
  arrange(desc(avg_percentage))
```

```{r}
# Make a plot!!
ggplot(total_depth_avg, aes(x = reorder(PMEP_Zone, avg_percentage), y = avg_percentage)) +
  geom_col(fill = '#09EEC8') +
  coord_flip() +  # Horizontal bars
  labs(
    title = "What is the Average % Cover of any given **Depth Zone**<br>within California MPAs?",
    x = NULL,
    y = "Average Percentage Composition of Depths per Zone"
  ) +
  theme_bw() +
  theme(plot.title = element_markdown(size = 30, hjust = 1, family = "montserrat"),
        axis.text.x = element_text(family = "montserrat", size = 14),  
        axis.text.y = element_text(family = "montserrat", size = 14),  
        axis.title.x = element_text(family = "montserrat", size = 16),  
        axis.title.y = element_text(family = "montserrat", size = 16)) 
```




# SOCAL BIOREGION ANALYSIS! AND A LOOK AT THE CHANNEL ISLANDS

```{r}
# List all MPAs in southern CA
unique(south_sub_mpa$shortname)
```
```{r}
tm_shape(south_sub_mpa) +
  tm_polygons() 
```
```{r}
# Transform CRS for this map, since leaflet requires WGS84
south_sub_mpa <- st_transform(south_sub_mpa, crs = 4326)

# Create a color palette for the `pmep_zone_detail` variable
color_palette <- colorFactor(
  palette = c('#C4A9C2', '#CEB6AD', '#D8C397', '#A5CEA4', '#71D9B0', 
              '#09EEC8', '#22CFA7', '#3BAF85', '#6EA1C8', '#3C7BB7', '#796655'),
  domain = south_sub_mpa$pmep_zone_detail
)

# Generate the Leaflet map
leaflet() |>
  addProviderTiles(providers$CartoDB.Positron) |>
  setView(lng = -119.6989,
          lat = 34.4203,
          zoom = 8) |>
  addMiniMap(toggleDisplay = TRUE,
             minimized = FALSE) |>
  addPolygons(data = south_sub_mpa,
              color = ~color_palette(pmep_zone_detail), # Apply the color palette
              weight = 3,
              popup = paste0("MPA Name:  ", south_sub_mpa$shortname, "<br>",
                            "MPA Type:  ", south_sub_mpa$type, "<br>",
                            "PMEP Zone Detail:  ", south_sub_mpa$pmep_zone_detail))
```

Looking at the leaflet above im noticing some unexpected missing mpas... is it the substrate data?

```{r}
# Transform CRS for this map, since leaflet requires WGS84
mpas <- st_transform(mpas, crs = 4326)

# Map
leaflet() |>
  addProviderTiles(providers$CartoDB.Positron) |>
  setView(lng = -119.6989,
          lat = 34.4203,
          zoom = 8) |>
  addMiniMap(toggleDisplay = TRUE,
             minimized = FALSE) |>
  addPolygons(data = mpas,
              color = "#09EEC8",
              weight = 3,
              popup = paste0("MPA Name:  ", mpas$shortname, "<br>",
                            "MPA Type:  ", mpas$type))
```


OK, theres definitely MPAs there... lets look at the substrate data and see if any data looks like its missing, or maybe there just isnt substate data for those areas?

```{r}
harris_point_sub <- south_sub_mpa |> 
  filter(shortname == "Harris Point") 

tm_shape(harris_point_sub) +
  tm_polygons()
```



```{r}
unique(south_sub_mpa)
```


