---
title: "California Statewide Depth Zones Analysis"
author: "Bailey JÃ¸rgensen"
format: html
---

```{r}
# load libraries
librarian::shelf(tidyverse, janitor, sf, terra, tmap, knitr, showtext, gt, ggtext, leaflet, here)
```

## Here is what the PMEP depth zones stand for, according to the metadata:

### NOTE: The substrate data records the whole name, rather than using the # code

-   Value 0: Landward Zone
-   Value 1: Core Zone (Estuary Overlap)
-   Value 2: Core Zone (Shoreline to -30m), State Waters
-   Value 3: Core Zone (Shoreline to -30m), Federal Waters
-   Value 4: Seaward Zone (-30m to -100m), State Waters
-   Value 5: Seaward Zone (-30m to -100m), Federal Waters
-   Value 6: Deep Shelf or Channel (-100m to -200m), State Waters
-   Value 7: Deep Shelf or Channel (-100m to -200m), Federal WatersLN
-   Value 8: Outside PMEP Score (>-300m) or International Waters

## For the purposes of the PMEP depth zone analysis, I have decided to use the PMEP Zones that are recorded in the substrate data, rather than the biotic data. This is because it is expected for there to be 100% MPA coverage of the different substrate types, where as the biotic data may not contain whole coverage of MPA, given the nature of biota.

## Read in substrate, biota and MPA data

```{r}
# Read in substrate and biotic data ... Commented out, because I chose to load the RDS files into my environment prior to this
substrate <- readRDS(here("data", "substrate.rds"))
biota <- readRDS(here("data", "biota.rds")) 

# Read in MPA boundaries data
boundary.dir <- "/capstone/marinebiomaps/data/MPA_boundaries"
mpa_boundaries <- sf::st_read(file.path(boundary.dir, "California_Marine_Protected_Areas_[ds582].shp"))

# Clean and transform MPA boundaries data
mpas <- mpa_boundaries |> 
  clean_names() |> 
  select("type", "shortname", "geometry") |> 
  st_transform(mpas, crs = st_crs(substrate)) |> 
  st_make_valid()

# Filter the substrate data to just the variables I'm interested in - KEEP GEO
depth_zones_sub_filtered <- substrate |>
  select("pmep_zone_detail", "Shape", "pmep_region", "area_ha", "shape_area")
```

## OK HERE... I AM TRYING TO COMBINE THE DATA SO THAT I CAN DO FULL MPA ANALYSIS...

### I can run stats on the data after removing the geometry column.......but first i have to join the geospatial data together to get the mpas overlain with the sub....

#### BUT i can do it in 3s, remove the geometry, and then join the three simple dfs to run analysis, without doing too much comp. NO NEED to make a big statewide map..............at least not yet

## BUT FIRST IM GOING TO HAVE TO BREAK THIS DOWN INTO SMALLER CATEGORIES because there are some invalid polygons preventing analysis, and st_make_valid was not gonna run on a file this size.

```{r}
# Filter to North
north_sub <- depth_zones_sub_filtered |>
  filter(pmep_region == "Pacific Northwest")

# Filter to Central
central_sub <- depth_zones_sub_filtered |>
  filter(pmep_region == "Central California")

# Filter to Southern
south_sub <- depth_zones_sub_filtered |>
  filter(pmep_region == "Southern California Bight")
```

```{r}
north_sub_mpa <- st_intersection(mpas, north_sub)
```

```{r}
central_sub_mpa <- st_intersection(mpas, central_sub)
```

```{r}
south_sub_mpa <- st_intersection(mpas, south_sub)
```

## All of the mpas and substrates were able to be combined in the separate regions....SO THE INVALID POLYGONS ARE PROBABLY IN THE REGION OVERLAP

```{r}
# Make NON GEO dfs for each region
north_sub_mpa_simple <- north_sub_mpa |> 
  st_drop_geometry()

central_sub_mpa_simple <- central_sub_mpa |> 
  st_drop_geometry()

south_sub_mpa_simple <- south_sub_mpa |> 
  st_drop_geometry()
```

```{r}
# COMBINE the simple dfs into one big simple df for all of CA depth zones!!!!!!!
california_depths_simple <- bind_rows(north_sub_mpa_simple, central_sub_mpa_simple, south_sub_mpa_simple)
```

```{r}
unique(california_depths_simple$pmep_zone_detail)
```
```{r}
# Rename depth zone variables for searchability/ease
california_depths_simple <- california_depths_simple |> 
  mutate(pmep_zone_detail = case_when(
    pmep_zone_detail == "Deep Shelf or Sound (-100m to -200m), State Waters"  ~ "Zone 6",
    pmep_zone_detail == "Outside PMEP Scope (>-200m) or International Waters" ~ "Zone 8",
    pmep_zone_detail == "Seaward Zone (-30m to -100m), Federal"               ~ "Zone 5",
    pmep_zone_detail == "Core Zone (Shoreline to -30m), State Waters"         ~ "Zone 2",
    pmep_zone_detail == "Landward Zone"                                       ~ "Zone 0",
    pmep_zone_detail == "Seaward Zone (-30m to -100m), State Waters"          ~ "Zone 4",
    pmep_zone_detail == "Deep Shelf or Sound (-100m to -200m), Federal"       ~ "Zone 7",
    pmep_zone_detail == "Core Zone (Shoreline to -30m), Federal"              ~ "Zone 3"
  ))


unique(california_depths_simple$pmep_zone_detail)
```
```{r}
head(california_depths_simple)
```

#### I am going to calculate the percentages of each MPA that are in each depth zone - using the area column

```{r}
# Total area across all MPAs
total_ha_all_mpas <- sum(california_depths_simple$area_ha, na.rm = TRUE)

print(paste0("The total area of MPAs in Ha: ", round(total_ha_all_mpas, 2)))

# Summarize total area by zone and calculate percentage
zone_areas <- california_depths_simple |> 
  group_by(pmep_zone_detail) |> 
  summarize(total_area_ha = sum(area_ha, na.rm = TRUE), .groups = "drop") |> 
  mutate(percent_of_total = (total_area_ha / total_ha_all_mpas) * 100)

# Print formatted output
zone_areas |> 
  arrange(pmep_zone_detail) |> 
  rowwise() |> 
  mutate(print_statement = paste0(
    pmep_zone_detail, 
    ": ", round(total_area_ha, 2), " ha (", 
    round(percent_of_total, 2), "% of total)"
  )) |> 
  pull(print_statement) |> 
  cat(sep = "\n")

```
*Note: The total area calculated is higher than the sum of the total added together zone areas, which total 34,766,903.27. This is a 369,000 hectare difference. I will try to figure out why, but am at the moment assuming that there are N/A values, or polygons that are not marked as being part of any zone.*

```{r}
# Lets make a plot of this!
zone_areas |> 
  ggplot(aes(x = pmep_zone_detail, 
             y = percent_of_total)) +
  geom_col(fill = "#C4A9C2") +
  labs(
    title = "Percentage of Total MPA Area by PMEP Zone",
    x = "PMEP Zone",
    y = "Percent of Total Area (%)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_text(aes(label = paste0(round(percent_of_total, 1), "%")), 
            vjust = -0.5, size = 3.5)

```

```{r}
zones_to_plot <- c("Zone 0", "Zone 1", "Zone 2", "Zone 4", "Zone 6")

zone_areas_filtered <- zone_areas |> 
  filter(pmep_zone_detail %in% zones_to_plot) |> 
  mutate(pmep_zone_detail = factor(pmep_zone_detail, levels = zones_to_plot))


ggplot(zone_areas_filtered, aes(x = pmep_zone_detail, y = percent_of_total)) +
  geom_col(fill = "#71D9B0") +
  labs(
    title = "Selected PMEP Zones: Percent of Total MPA Area",
    x = "PMEP Zone",
    y = "Percent of Total Area (%)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_text(aes(label = paste0(round(percent_of_total, 1), "%")), 
            vjust = -0.5, size = 3.5)

```

```{r}
# A minimal base to put into photoshop for styling
zones_to_plot <- c("Zone 0", "Zone 1", "Zone 2", "Zone 4", "Zone 6")

zone_areas_filtered <- zone_areas |> 
  filter(pmep_zone_detail %in% zones_to_plot) |> 
  mutate(pmep_zone_detail = factor(pmep_zone_detail, levels = zones_to_plot))


ggplot(zone_areas_filtered, aes(x = pmep_zone_detail, y = percent_of_total)) +
  geom_col(fill = "#71D9B0") +
  labs(
    #title = "Selected PMEP Zones: Percent of Total MPA Area",
    x = NULL,
    y = NULL
  ) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank())

```
*Where is zone 1?? not in MPAs apparently...gonna look into that. There is probably some zone 1 outside of mpas- where is it at?*


# STATEWIDE COMPARATIVE ANALYSIS.

```{r}
depths_with_sub <- substrate |> 
  select("pmep_zone_detail", "Shape", "pmep_region", "area_ha", "shape_area", "cmecs_sc_name") |> 
  mutate(pmep_zone_detail = case_when(
    pmep_zone_detail == "Deep Shelf or Sound (-100m to -200m), State Waters"  ~ "Zone 6",
    pmep_zone_detail == "Outside PMEP Scope (>-200m) or International Waters" ~ "Zone 8",
    pmep_zone_detail == "Seaward Zone (-30m to -100m), Federal"               ~ "Zone 5",
    pmep_zone_detail == "Core Zone (Shoreline to -30m), State Waters"         ~ "Zone 2",
    pmep_zone_detail == "Landward Zone"                                       ~ "Zone 0",
    pmep_zone_detail == "Seaward Zone (-30m to -100m), State Waters"          ~ "Zone 4",
    pmep_zone_detail == "Deep Shelf or Sound (-100m to -200m), Federal"       ~ "Zone 7",
    pmep_zone_detail == "Core Zone (Shoreline to -30m), Federal"              ~ "Zone 3"
  ))

depths_with_sub_simple <- substrate |> 
  select("pmep_zone_detail", "Shape", "pmep_region", "area_ha", "shape_area", "cmecs_sc_name") |> 
  mutate(pmep_zone_detail = case_when(
    pmep_zone_detail == "Deep Shelf or Sound (-100m to -200m), State Waters"  ~ "Zone 6",
    pmep_zone_detail == "Outside PMEP Scope (>-200m) or International Waters" ~ "Zone 8",
    pmep_zone_detail == "Seaward Zone (-30m to -100m), Federal"               ~ "Zone 5",
    pmep_zone_detail == "Core Zone (Shoreline to -30m), State Waters"         ~ "Zone 2",
    pmep_zone_detail == "Landward Zone"                                       ~ "Zone 0",
    pmep_zone_detail == "Seaward Zone (-30m to -100m), State Waters"          ~ "Zone 4",
    pmep_zone_detail == "Deep Shelf or Sound (-100m to -200m), Federal"       ~ "Zone 7",
    pmep_zone_detail == "Core Zone (Shoreline to -30m), Federal"              ~ "Zone 3"
  )) |> 
  st_drop_geometry()

unique(depths_with_sub$pmep_zone_detail)
```
```{r}
unique(depths_with_sub_simple)
```

```{r}
# Make a dataframe for each of the depth zones
zone0_df <- depths_with_sub_simple |> 
  filter(pmep_zone_detail == "Zone 0")

zone2_df <- depths_with_sub_simple |> 
  filter(pmep_zone_detail == "Zone 2")

zone3_df <- depths_with_sub_simple |> 
  filter(pmep_zone_detail == "Zone 3")

zone4_df <- depths_with_sub_simple |> 
  filter(pmep_zone_detail == "Zone 4")

zone5_df <- depths_with_sub_simple |> 
  filter(pmep_zone_detail == "Zone 5")

zone6_df <- depths_with_sub_simple |> 
  filter(pmep_zone_detail == "Zone 6") 

zone7_df <- depths_with_sub_simple |> 
  filter(pmep_zone_detail == "Zone 7")

zone8_df <- depths_with_sub_simple |> 
  filter(pmep_zone_detail == "Zone 8")
```

```{r}
unique(zone8_df$cmecs_sc_name)
```

```{r}
total_ha_zone0 <- sum(zone0_df$area_ha, na.rm = TRUE)

print(paste0("The total area of Zone 0 in Ha: ", round(total_ha_zone0, 2)))

# Calculate percentage of substrates per depth zone
zone0_with_sub <- zone0_df |> 
  group_by(cmecs_sc_name) |> 
  summarize(persub_area_ha0 = sum(area_ha, na.rm = TRUE), .groups = "drop") |> 
  mutate(percent_of_total0 = (persub_area_ha0 / total_ha_zone0) * 100)

# Print formatted output
zone0_with_sub |> 
  arrange(cmecs_sc_name) |> 
  rowwise() |> 
  mutate(print_statement = paste0(
    cmecs_sc_name, 
    ": ", 
    round(persub_area_ha0, 2), " ha (", 
    round(percent_of_total0, 2), "% of total)"
  )) |> 
  pull(print_statement) |> 
  cat(sep = "\n")

```

```{r}
# zone_areas_filtered <- zone_areas |> 
#   filter(pmep_zone_detail %in% zones_to_plot) |> 
#   mutate(pmep_zone_detail = factor(pmep_zone_detail, levels = zones_to_plot))


ggplot(zone0_with_sub, aes(x = cmecs_sc_name, y = percent_of_total0)) +
  geom_col(fill = "#796655") +
  labs(
    title = "Substrates represented in Depth Zone 0",
    x = "PMEP Substrate Category",
    y = "Percent of Total Area (%)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_text(aes(label = paste0(round(percent_of_total0, 1), "%")), 
            vjust = -0.5, size = 3.5)
```







# More Visuals for Report: 

```{r}
# Leaflet requrires a CRS of WGS84
mpa_boundaries_WGS84 <- mpa_boundaries |> 
  sf::st_transform('+proj=latlong +datum=WGS84')

# Lets just make a map of all of the CA MPAs
leaflet() |>
  addProviderTiles(providers$CartoDB.Positron) |>
  setView(lng = -119.6989,
          lat = 34.4203,
          zoom = 8) |>
  addMiniMap(toggleDisplay = TRUE,
             minimized = FALSE) |>
  addPolygons(data = mpa_boundaries_WGS84,
              color = "darkgoldenrod",
              weight = 3,
              popup = paste0("MPA Name:  ", mpa_boundaries_WGS84$FULLNAME, "<br>",
                             "Total Square Miles:  ", mpa_boundaries_WGS84$Area_sq_mi))
```



