---
title: "California Statewide Depth Zones Analysis"
author: "Bailey JÃ¸rgensen"
format: html
---

```{r}
# load libraries
librarian::shelf(tidyverse, janitor, sf, terra, tmap, knitr, showtext, ggtext, leaflet, here)
```

## Here is what the PMEP depth zones stand for, according to the metadata:

### NOTE: The substrate data records the whole name, rather than using the # code

-   Value 0: Landward Zone
-   Value 1: Core Zone (Estuary Overlap)
-   Value 2: Core Zone (Shoreline to -30m), State Waters
-   Value 3: Core Zone (Shoreline to -30m), Federal Waters
-   Value 4: Seaward Zone (-30m to -100m), State Waters
-   Value 5: Seaward Zone (-30m to -100m), Federal Waters
-   Value 6: Deep Shelf or Channel (-100m to -200m), State Waters
-   Value 7: Deep Shelf or Channel (-100m to -200m), Federal WatersLN
-   Value 8: Outside PMEP Score (>-300m) or International Waters

## For the purposes of the PMEP depth zone analysis (when determining overall coverage), I have decided to use the PMEP Zones that are recorded in the substrate data, rather than the biotic data. This is because it is expected for there to be 100% MPA coverage of the different substrate types, where as the biotic data may not contain whole coverage of MPA, given the nature of biota.

## Read in substrate, biota and MPA data

```{r}
# Read in substrate and biotic data
rds.dir <- "/capstone/marinebiomaps/data/rds-files"
substrate_in_mpas <- readRDS(file.path(rds.dir, "substrate_in_mpas.rds"))
biota_in_mpas <- readRDS(file.path(rds.dir, "biota_in_mpas.rds"))
#substrate_outside_mpas <- readRDS(file.path(rds.dir, "substrate_outside_mpas.rds"))

# Read in MPA boundaries data
boundary.dir <- "/capstone/marinebiomaps/data/MPA_boundaries"
mpa_boundaries <- sf::st_read(file.path(boundary.dir, "California_Marine_Protected_Areas_[ds582].shp"))

# Clean and transform MPA boundaries data
mpas <- mpa_boundaries |> 
  clean_names() |> 
  st_transform(mpas, crs = st_crs(substrate_in_mpas)) |> 
  st_make_valid()

```

## In the substrate.rds and biota.rds files, we already have the area of each polygon calculated and stored in a column. So, for much of the statewide analysis, it is ok to use the data with the geometry column dropped!

```{r}
# Drop the geometry of the substrate column. 
substrate_in_mpas_simple <- substrate_in_mpas |> 
  st_drop_geometry() 
```


```{r}
# Take a look at all the PMEP depth zones to verify
unique(substrate_in_mpas_simple$pmep_zone_detail)
```
```{r}
# Rename depth zone variables for searchability/ease - I will bring back more technical names for viz
substrate_in_mpas_simple <- substrate_in_mpas_simple |> 
  mutate(pmep_zone_detail = case_when(
    pmep_zone_detail == "Deep Shelf or Sound (-100m to -200m), State Waters"  ~ "Zone 6",
    pmep_zone_detail == "Outside PMEP Scope (>-200m) or International Waters" ~ "Zone 8",
    pmep_zone_detail == "Seaward Zone (-30m to -100m), Federal"               ~ "Zone 5",
    pmep_zone_detail == "Core Zone (Shoreline to -30m), State Waters"         ~ "Zone 2",
    pmep_zone_detail == "Landward Zone"                                       ~ "Zone 0",
    pmep_zone_detail == "Seaward Zone (-30m to -100m), State Waters"          ~ "Zone 4",
    pmep_zone_detail == "Deep Shelf or Sound (-100m to -200m), Federal"       ~ "Zone 7",
    pmep_zone_detail == "Core Zone (Shoreline to -30m), Federal"              ~ "Zone 3"
  ))


unique(substrate_in_mpas_simple$pmep_zone_detail)
```


#### I am going to calculate the percentages of each MPA that are in each depth zone - using the area column

```{r}
# Total area across all MPAs
total_ha_all_mpas <- sum(substrate_in_mpas_simple$area_ha, na.rm = TRUE)

print(paste0("The total area of Substrate data within California MPAs in Ha: ", round(total_ha_all_mpas, 2)))

# Summarize total area by zone and calculate percentage
zone_areas <- substrate_in_mpas_simple |> 
  group_by(pmep_zone_detail) |> 
  summarize(total_area_per_zone = sum(area_ha, na.rm = TRUE), .groups = "drop") |> 
  mutate(percent_of_total = (total_area_per_zone / total_ha_all_mpas) * 100)

# Print formatted output
zone_areas |> 
  arrange(pmep_zone_detail) |> 
  rowwise() |> 
  mutate(print_statement = paste0(
    pmep_zone_detail, 
    ": ", round(total_area_per_zone, 2), " ha (", 
    round(percent_of_total, 2), "% of total)"
  )) |> 
  pull(print_statement) |> 
  cat(sep = "\n")

```
*Note: The total area calculated is higher than the sum of the total added together zone areas, which total 34,766,903.27. This is a 369,000 hectare difference. I will try to figure out why, but am at the moment assuming that there are N/A values, or polygons that are not marked as being part of any zone.*


```{r}
# Taking out zone 1 since it is empty....as well as the federal zones
zones_to_plot <- c("Zone 0", "Zone 2", "Zone 4", "Zone 6", "Zone 8")

zone_areas_filtered <- zone_areas |> 
  filter(pmep_zone_detail %in% zones_to_plot) |> 
  mutate(pmep_zone_detail = case_when(
    pmep_zone_detail == "Zone 0" ~ "Landward Zone",
    pmep_zone_detail == "Zone 2" ~ "Core Zone (Shoreline to -30m)",
    pmep_zone_detail == "Zone 4" ~ "Seaward Zone (-30m to -100m)",
    pmep_zone_detail == "Zone 6" ~ "Deep Shelf or Sound (-100m to -200m)",
    pmep_zone_detail == "Zone 8" ~ "Outside PMEP Scope (>-200m)"
  )) |> 
  mutate(pmep_zone_detail = factor(pmep_zone_detail, levels = c(
    "Landward Zone",
    "Core Zone (Shoreline to -30m)",
    "Seaward Zone (-30m to -100m)",
    "Deep Shelf or Sound (-100m to -200m)",
    "Outside PMEP Scope (>-200m)"
  )))

font_add_google("Montserrat", "montserrat")
showtext_auto()

ggplot(zone_areas_filtered, aes(x = percent_of_total, y = pmep_zone_detail, fill = pmep_zone_detail)) +
  geom_col() +
  labs(
    title = "Depth Zones as a % of Total Statewide MPA Area",
    x = "Percent of Total Area (%)",
    y = "PMEP Depth Zone"
  ) +
  theme_classic() +
  theme(
    text = element_text(family = "montserrat", size = 18),
    axis.text.x = element_text(hjust = 1),
    legend.position = "none") +
  geom_label(aes(label = paste0(round(percent_of_total, 1), "%")),
             fill = "white", 
             color = "black",
             hjust = 0,    # Align to left
             x = 1,        # Set near y-axis (adjust as needed)
             size = 3.5) +
  scale_fill_brewer(palette = "Blues") +
  scale_y_discrete(labels = function(x) str_wrap(x, width = 20))

```

*Where is zone 1?? not in MPAs apparently...gonna look into that. There is probably some zone 1 outside of mpas- where is it at? Estuaries data, perhaps?*




# STATEWIDE COMPARATIVE ANALYSIS.


```{r}
unique(substrate_in_mpas_simple$pmep_zone_detail)
```

```{r}
# Make a dataframe for each of the depth zones - ONLY STATE WATERS
zone0_df <- substrate_in_mpas_simple |> 
  filter(pmep_zone_detail == "Zone 0")

zone2_df <- substrate_in_mpas_simple |> 
  filter(pmep_zone_detail == "Zone 2")

zone4_df <- substrate_in_mpas_simple |> 
  filter(pmep_zone_detail == "Zone 4")

zone6_df <- substrate_in_mpas_simple |> 
  filter(pmep_zone_detail == "Zone 6") 

zone8_df <- substrate_in_mpas_simple |> 
  filter(pmep_zone_detail == "Zone 8")
```


```{r}
total_ha_zone0 <- sum(zone0_df$area_ha, na.rm = TRUE)

print(paste0("The total area of Zone 0 in Ha: ", round(total_ha_zone0, 2)))

# Calculate percentage of substrates per depth zone
zone0_with_sub <- zone0_df |> 
  group_by(cmecs_sc_category) |> 
  summarize(persub_area_ha0 = sum(area_ha, na.rm = TRUE), .groups = "drop") |> 
  mutate(percent_of_total0 = (persub_area_ha0 / total_ha_zone0) * 100)

# Print formatted output
zone0_with_sub |> 
  arrange(cmecs_sc_category) |> 
  rowwise() |> 
  mutate(print_statement = paste0(
    cmecs_sc_category, 
    ": ", 
    round(persub_area_ha0, 2), " ha (", 
    round(percent_of_total0, 2), "% of total)"
  )) |> 
  pull(print_statement) |> 
  cat(sep = "\n")

```
**NOTE: I ran this analysis with cmecs_sc_name as well, and it was interesting, but a lot of categories with very small #s. This reinforces the decision we made as a team to use the cmecs_sc_category column intead for our analysis, as it groups some of these smaller categories together.**

```{r}
# Define palette -- adapted from lisa::C_M_Coolidge from scale_fill_paletteer
substrate_palette <- c("#204035FF", "#4A7169FF", "#849383", "#BEB59CFF", "#998467", "#735231FF", "#49271BFF")

ggplot(zone0_with_sub, aes(x = percent_of_total0, y = cmecs_sc_category, fill = cmecs_sc_category)) +
  geom_col() +
  labs(
    title = "Substrates represented in Depth Zone 0",
    x = "PMEP Substrate Category",
    y = "Percent of Total Area (%)"
  ) +
  scale_fill_manual(values = substrate_palette) +
  theme_classic() +
  theme(text = element_text(family = "montserrat", size = 18),
    legend.position = 'none',
    axis.text.x = element_text(hjust = 1)) +
  geom_label(aes(label = paste0(round(percent_of_total0, 1), "%")),
             fill = "white", 
             color = "black",
             hjust = 0,    # Align to left
             x = 1,        # Set near y-axis (adjust as needed)
             size = 3.5) +
  scale_y_discrete(labels = function(x) str_wrap(x, width = 20))
```

```{r}
# Calculate Zone 2 sub!!
total_ha_zone2 <- sum(zone2_df$area_ha, na.rm = TRUE)

print(paste0("The total area of Zone 2 in Ha: ", round(total_ha_zone2, 2)))

# Calculate percentage of substrates per depth zone
zone2_with_sub <- zone2_df |> 
  group_by(cmecs_sc_category) |> 
  summarize(persub_area_ha2 = sum(area_ha, na.rm = TRUE), .groups = "drop") |> 
  mutate(percent_of_total2 = (persub_area_ha2 / total_ha_zone2) * 100)

# Print formatted output
zone2_with_sub |> 
  arrange(cmecs_sc_category) |> 
  rowwise() |> 
  mutate(print_statement = paste0(
    cmecs_sc_category, 
    ": ", 
    round(persub_area_ha2, 2), " ha (", 
    round(percent_of_total2, 2), "% of total)"
  )) |> 
  pull(print_statement) |> 
  cat(sep = "\n")
```
```{r}
# Plot Zone 2!!
ggplot(zone2_with_sub, aes(x = percent_of_total2, y = cmecs_sc_category, fill = cmecs_sc_category)) +
  geom_col() +
  labs(
    title = "Substrates represented in Depth Zone 2",
    x = "PMEP Substrate Category",
    y = "Percent of Total Area (%)"
  ) +
  scale_fill_manual(values = substrate_palette) +
  theme_classic() +
  theme(text = element_text(family = "montserrat", size = 18),
    legend.position = 'none',
    axis.text.x = element_text(hjust = 1)) +
  geom_label(aes(label = paste0(round(percent_of_total2, 1), "%")),
             fill = "white", 
             color = "black",
             hjust = 0,    # Align to left
             x = 1,        # Set near y-axis (adjust as needed)
             size = 3.5) +
  scale_y_discrete(labels = function(x) str_wrap(x, width = 20))
```

```{r}
# Calculate Zone 4 sub!!
total_ha_zone4 <- sum(zone4_df$area_ha, na.rm = TRUE)

print(paste0("The total area of Zone 4 in Ha: ", round(total_ha_zone4, 2)))

# Calculate percentage of substrates per depth zone
zone4_with_sub <- zone4_df |> 
  group_by(cmecs_sc_category) |> 
  summarize(persub_area_ha4 = sum(area_ha, na.rm = TRUE), .groups = "drop") |> 
  mutate(percent_of_total4 = (persub_area_ha4 / total_ha_zone4) * 100)

# Print formatted output
zone4_with_sub |> 
  arrange(cmecs_sc_category) |> 
  rowwise() |> 
  mutate(print_statement = paste0(
    cmecs_sc_category, 
    ": ", 
    round(persub_area_ha4, 2), " ha (", 
    round(percent_of_total4, 2), "% of total)"
  )) |> 
  pull(print_statement) |> 
  cat(sep = "\n")
```
```{r}
# Plot Zone 4
ggplot(zone4_with_sub, aes(x = percent_of_total4, y = cmecs_sc_category, fill = cmecs_sc_category)) +
  geom_col() +
  labs(
    title = "Substrates represented in Depth Zone 4",
    x = "PMEP Substrate Category",
    y = "Percent of Total Area (%)"
  ) +
  scale_fill_manual(values = substrate_palette) +
  theme_classic() +
  theme(text = element_text(family = "montserrat", size = 18),
    legend.position = 'none',
    axis.text.x = element_text(hjust = 1)) +
  geom_label(aes(label = paste0(round(percent_of_total4, 1), "%")),
             fill = "white", 
             color = "black",
             hjust = 0,    # Align to left
             x = 1,        # Set near y-axis (adjust as needed)
             size = 3.5) +
  scale_y_discrete(labels = function(x) str_wrap(x, width = 20))
```


```{r}
# Calculate Zone 6 sub!! 
total_ha_zone6 <- sum(zone6_df$area_ha, na.rm = TRUE)

print(paste0("The total area of Zone 6 in Ha: ", round(total_ha_zone6, 2)))

# Calculate percentage of substrates per depth zone
zone6_with_sub <- zone6_df |> 
  group_by(cmecs_sc_category) |> 
  summarize(persub_area_ha6 = sum(area_ha, na.rm = TRUE), .groups = "drop") |> 
  mutate(percent_of_total6 = (persub_area_ha6 / total_ha_zone6) * 100)

# Print formatted output
zone6_with_sub |> 
  arrange(cmecs_sc_category) |> 
  rowwise() |> 
  mutate(print_statement = paste0(
    cmecs_sc_category, 
    ": ", 
    round(persub_area_ha6, 2), " ha (", 
    round(percent_of_total6, 2), "% of total)"
  )) |> 
  pull(print_statement) |> 
  cat(sep = "\n")
```
```{r}
# Plot Zone 6
ggplot(zone6_with_sub, aes(x = percent_of_total6, y = cmecs_sc_category, fill = cmecs_sc_category)) +
  geom_col() +
  labs(
    title = "Substrates represented in Depth Zone 6",
    x = "PMEP Substrate Category",
    y = "Percent of Total Area (%)"
  ) +
  scale_fill_manual(values = substrate_palette) +
  theme_classic() +
  theme(text = element_text(family = "montserrat", size = 18),
    legend.position = 'none',
    axis.text.x = element_text(hjust = 1)) +
  geom_label(aes(label = paste0(round(percent_of_total6, 1), "%")),
             fill = "white", 
             color = "black",
             hjust = 0,    # Align to left
             x = 1,        # Set near y-axis (adjust as needed)
             size = 3.5) +
  scale_y_discrete(labels = function(x) str_wrap(x, width = 20))
```


```{r}
# Calculate Zone 8 sub!!
total_ha_zone8 <- sum(zone8_df$area_ha, na.rm = TRUE)

print(paste0("The total area of Zone 8 in Ha: ", round(total_ha_zone8, 2)))

# Calculate percentage of substrates per depth zone
zone8_with_sub <- zone8_df |> 
  group_by(cmecs_sc_category) |> 
  summarize(persub_area_ha8 = sum(area_ha, na.rm = TRUE), .groups = "drop") |> 
  mutate(percent_of_total8 = (persub_area_ha8 / total_ha_zone8) * 100)

# Print formatted output
zone8_with_sub |> 
  arrange(cmecs_sc_category) |> 
  rowwise() |> 
  mutate(print_statement = paste0(
    cmecs_sc_category, 
    ": ", 
    round(persub_area_ha8, 2), " ha (", 
    round(percent_of_total8, 2), "% of total)"
  )) |> 
  pull(print_statement) |> 
  cat(sep = "\n")
```
```{r}
# Plot zone 8
ggplot(zone8_with_sub, aes(x = percent_of_total8, y = cmecs_sc_category, fill = cmecs_sc_category)) +
  geom_col() +
  labs(
    title = "Substrates represented in Depth Zone 8",
    x = "PMEP Substrate Category",
    y = "Percent of Total Area (%)"
  ) +
  scale_fill_manual(values = substrate_palette) +
  theme_classic() +
  theme(text = element_text(family = "montserrat", size = 18),
    legend.position = 'none',
    axis.text.x = element_text(hjust = 1)) +
  geom_label(aes(label = paste0(round(percent_of_total8, 1), "%")),
             fill = "white", 
             color = "black",
             hjust = 0,    # Align to left
             x = 1,        # Set near y-axis (adjust as needed)
             size = 3.5) +
  scale_y_discrete(labels = function(x) str_wrap(x, width = 20))
```


### Work on reading in biota to integrate into analysis

**NOTE: There are no biota recorded in zone 0 in this dataset. This is a pretty big gap for this particular visualization, which has depth zones as it base. Could be worth figuring out why zone 0 is absent in this case**


```{r}
# Make a non geo biota df
biota_in_mpas_simple <- biota_in_mpas |> 
  st_drop_geometry()
```

```{r}
unique(zone2_df$cmecs_sc_category)
```
```{r}
unique(zone2_df$pmep_zone_detail)
```
```{r}
unique(substrate_in_mpas$pmep_zone_detail)
```

```{r}
# FIRST: TAKE A GEODF OF A DEPTH ZONE, AND FILTER IT TO JUST ONE OF THE RELEVANT TYPES, UNTIL WE HAVE A GEODF OF EACH SUB TYPE WE ARE ANALYZING
# LETS START WITH UNCONSOLIDATED MINERAL SUBSTRATE IN ZONE 2
zone2_geo_UMS <- substrate_in_mpas |> 
  filter(pmep_zone_detail == "Core Zone (Shoreline to -30m), State Waters") |> 
  filter(cmecs_sc_category == "Unconsolidated Mineral Substrate")

```

```{r}
# NEXT: MAKE A GEODF OF BIOTA IN ZONE 2
zone2_bio <- biota_in_mpas |> 
  filter(pmep_zone == "2")
```

```{r}
# NEXT: JOIN UMS DF WITH BIOTA DF, SO THAT ONLY THE BIOTA THAT INTERSECTS WITH THE UMS REMAINS
ums_bio <- st_intersection(zone2_geo_UMS, zone0_bio)
```
```{r}
unique(ums_bio$cmecs_bc_category)
```















**This chunk below is still a major work in progres...don't look too close, also variable names are currently wrong**
```{r}
# Make dataframes of biota and sub for each zone - KEEP GEO AND ONLY FOR ZONES WE CARE ABOUT

subgeo_zone2_df <- depths_with_sub |> 
  filter(pmep_zone_detail == "Zone 2")

subgeo_zone4_df <- depths_with_sub |> 
  filter(pmep_zone_detail == "Zone 4")

subgeo_zone6_df <- depths_with_sub |> 
  filter(pmep_zone_detail == "Zone 6") 





biogeo_zone2_df <- depths_with_biota |> 
  filter(pmep_zone == 2) |> 
  st_transform(biogeo_zone2_df, crs = st_crs(depths_with_sub))

biogeo_zone4_df <- depths_with_biota |> 
  filter(pmep_zone == 4)|> 
  st_transform(biogeo_zone4_df, crs = st_crs(depths_with_sub))

biogeo_zone6_df <- depths_with_biota |> 
  filter(pmep_zone == 6)|> 
  st_transform(biogeo_zone6_df, crs = st_crs(depths_with_sub))

```

```{r}
# Join dfs for zone 2, so we can know what biota overlaps with what substrate
zone2_subbio_overlap <- st_intersection(biogeo_zone2_df, subgeo_zone2_df)
```

```{r}
# Ok that worked but took forever. I think i want to filter both to region as well, and then run the join on each region, as well as zone. then, combine the data from the joins. 

```

```{r}
# Now that the tables are joined, we have a df that is just the bio that overlaps with the sub...theoretically now can drop the geo, make little dfs of each sub type, and then calculate what biotas take up what percentages of that sub

colnames(zone2_subbio_overlap)
```

```{r}
head(zone2_subbio_overlap)
```













# Make a map of the mpas colored by study region

```{r}
# Transform CRS for this map, since leaflet requires WGS84
mpas <- st_transform(mpas, crs = 4326)

# Factorize study regions
unique_regions <- c("NCSR", "NCCSR", "SFBSR", "CCSR", "SCSR")
mpas$study_regi <- factor(mpas$study_regi, levels = unique_regions)

# Define custom color palette
custom_colors <- c("#C4A9C2", "#71D9B0", "#D8C397", "#6EA1C8", "#796655")
pal <- colorFactor(palette = custom_colors, domain = unique_regions)

# Map with color-coded polygons
leaflet() |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  setView(lng = -119.6989, lat = 34.4203, zoom = 8) |> 
  addMiniMap(toggleDisplay = TRUE, minimized = FALSE) |> 
  addPolygons(data = mpas,
              color = ~pal(study_regi), # Assign colors based on study_region
              weight = 3,
              popup = paste0("MPA Name:  ", mpas$shortname, "<br>",
                             "MPA Type:  ", mpas$type, "<br>",
                             "Study Region:  ", mpas$study_regi)) |> 
  addLegend(position = "topright",
            pal = pal,
            values = mpas$study_regi,
            title = "MPA Study Region")
```

## This will make a map of the full study regions as they stand, without extending the latitude line to include all state waters. 
```{r}
# Make a map of the MLPA Study regions without MPAs
sr_boundary.dir <- "/capstone/marinebiomaps/data/MLPA_Study_Regions"
sr_boundaries <- sf::st_read(file.path(sr_boundary.dir, "Marine_Life_Protection_Act_Study_Regions_-_R7_-_CDFW_[ds3178].shp")) |> 
  clean_names()

```

```{r}
colnames(sr_boundaries)
```
```{r}
unique(sr_boundaries$study_regi)
```
```{r}
# Transform CRS for this map, since leaflet requires WGS84
sr_boundaries <- st_transform(sr_boundaries, crs = 4326)

# Factorize study regions
unique_regions <- c("NCSR", "NCCSR", "SFBSR", "CCSR", "SCSR")
sr_boundaries$study_regi <- factor(sr_boundaries$study_regi, levels = unique_regions)

# Define custom color palette
custom_colors <- c("#C4A9C2", "#71D9B0", "#D8C397", "#6EA1C8", "#796655")
pal <- colorFactor(palette = custom_colors, domain = unique_regions)

# Map with color-coded polygons
leaflet() |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  setView(lng = -119.6989, lat = 34.4203, zoom = 8) |> 
  addMiniMap(toggleDisplay = TRUE, minimized = FALSE) |> 
  addPolygons(data = sr_boundaries,
              color = ~pal(study_regi), # Assign colors based on study_region
              weight = 3,
              popup = paste0("Study Region Name:  ", sr_boundaries$name, "<br>",
                             "Study Region Abbreviation:  ", sr_boundaries$study_regi, "<br>")) |> 
  addLegend(position = "topright",
            pal = pal,
            values = sr_boundaries$study_regi,
            title = "MLPA Study Region")
```

